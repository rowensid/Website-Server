generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String              @id @default(cuid())
  email        String              @unique
  name         String?
  password     String
  role         Role                @default(USER)
  isActive     Boolean             @default(true)
  avatar       String?
  lastLoginAt  DateTime?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  orders       Order[]
  pteroServers PterodactylServer[]
  services     Service[]
  sessions     Session[]
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Service {
  id          String        @id @default(cuid())
  name        String
  type        ServiceType
  status      ServiceStatus @default(PENDING)
  price       Float
  config      Json?
  ip          String?
  port        Int?
  description String?
  userId      String
  expiresAt   DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  orders      Order[]
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  serviceId     String?
  amount        Float
  status        OrderStatus @default(PENDING)
  paymentMethod String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  service       Service?    @relation(fields: [serviceId], references: [id])
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PterodactylServer {
  id            String   @id @default(cuid())
  pteroId       String   @unique
  identifier    String   @unique
  name          String
  description   String?
  status        String
  suspended     Boolean  @default(false)
  limits        Json
  featureLimits Json
  userId        String?
  nodeId        String
  allocationId  String
  allocationIp  String?
  allocationPort Int?
  allocationAlias String?
  nestId        String
  eggId         String
  container     Json?
  // Resource monitoring fields
  cpuUsage      Float?
  memoryUsage   Int?
  memoryLimit   Int?
  diskUsage     Int?
  diskLimit     Int?
  networkRx     Int?
  networkTx     Int?
  uptime        Int?
  lastSyncAt    DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User?    @relation(fields: [userId], references: [id])
}

model ApiConfiguration {
  id          String   @id @default(cuid())
  name        String   @unique
  apiUrl      String
  apiKey      String
  isActive    Boolean  @default(true)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model StoreItem {
  id          String      @id @default(cuid())
  title       String
  description String?
  price       Float
  category    StoreCategory
  imageUrl    String?
  imageLink   String?
  isActive    Boolean     @default(true)
  featured    Boolean     @default(false)
  metadata    Json?       // Additional data like download links, specs, etc.
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum Role {
  USER
  ADMIN
  OWNER
}

enum ServiceType {
  GAME_HOSTING
  RDP
  FIVEM_DEVELOPMENT
  ROBLOX_DEVELOPMENT
}

enum ServiceStatus {
  PENDING
  ACTIVE
  SUSPENDED
  CANCELLED
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum StoreCategory {
  MOD
  GAME
  HOSTING
  SERVER
}